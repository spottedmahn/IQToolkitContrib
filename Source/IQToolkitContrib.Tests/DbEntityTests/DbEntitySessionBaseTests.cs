using System.Linq;
using IQToolkit;
using IQToolkitContrib.Tests.DbEntityTests;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace IQToolkitContrib.Tests {
    [TestClass]
    public class DbEntitySessionBaseTests : ATest {
        [TestMethod]
        public void DbEntitySessionBaseTests_InsertOrUpdateReturnsTheAutoGeneratedPrimaryKeyValue_Test() {
            var context = new NorthwindContext(@"Northwind.dbc");
            var session = new NorthwindSessionFix(context.Provider);
            var category = new Category { CategoryName = "SessionX" };

            session.Categories.SetSubmitAction(category, SubmitAction.InsertOrUpdate);
            session.SubmitChanges();
            Assert.AreNotEqual(0, category.CategoryId);
            Assert.IsNotNull(context.Categories.Where(x => x.CategoryName == category.CategoryName).SingleOrDefault());
        }

        [TestMethod]
        public void DbEntitySessionBaseTests_SessionSelectWithStringAsResultFixTest() {
            var context = new NorthwindContext(@"Northwind.dbc");
            var session = new NorthwindSessionFix(context.Provider);

            var list = session.Categories.Select(x => x.CategoryName).ToList();
            Console.WriteLine(string.Join("\n", list.ToArray()));
            Assert.AreEqual(8, list.Count);
        }

        /// <summary>
        /// NorthwindSessionFix subclasses DbEntitySessionBase.
        /// Verifies that the AutoGenerated Primary Key property is getting set after the insert statement has been executed when using DbEntitySessionBase.
        /// </summary>
        [TestMethod]
        public void DbEntitySessionBaseTests_InsertReturnsTheAutoGeneratedPrimaryKeyValue_Test() {
            var context = new NorthwindContext(@"Northwind.dbc");
            var session = new NorthwindSessionFix(context.Provider);
            var category = new Category { CategoryName = "SessionX" };

            session.Categories.SetSubmitAction(category, SubmitAction.Insert);
            session.SubmitChanges();
            Assert.AreNotEqual(0, category.CategoryId);
            Assert.IsNotNull(context.Categories.Where(x => x.CategoryName == category.CategoryName).SingleOrDefault());
        }

        /// <summary>
        /// NorthwindSession subclasses IQToolkit.Data.EntitySession.
        /// Shows that there is a bug when projecting a type that is not mapped as an Entity.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void DbEntitySessionBaseTests_SessionSelectWithStringAsResultTest() {
            var context = new NorthwindContext(@"Northwind.dbc");
            var session = new NorthwindSession(context);

            var list = session.Categories.Select(x => x.CategoryName).ToList();

            Assert.AreEqual(8, list.Count);
        }

        /// <summary>
        /// NorthwindSession subclasses IQToolkit.Data.EntitySession.
        /// Verifies that the AutoGenerated Primary Key property is not getting set after the insert statement has been executed when using IQToolkit.Data.EntitySession.
        /// </summary>
        [TestMethod]
        public void DbEntitySessionBaseTests_InsertWithoutReturningTheAutoGeneratedPrimaryKeyValue_Test() {
            var context = new NorthwindContext(@"Northwind.dbc");
            var session = new NorthwindSession(context);
            var category = new Category { CategoryName = "SessionCat" };

            session.Categories.SetSubmitAction(category, SubmitAction.Insert);
            session.SubmitChanges();
            Assert.AreEqual(0, category.CategoryId);
            Assert.IsNotNull(context.Categories.Where(x => x.CategoryName == category.CategoryName).SingleOrDefault());
        }

        [TestInitialize]
        public void TestInitialize() {
            CopyData(BackupPath, DbcPath);
        }

        [TestCleanup]
        public void TestCleanup() {
            CopyData(BackupPath, DbcPath);
        }

        protected override DataContext GetDataContext() {
            throw new NotImplementedException();
        }
    }
}
